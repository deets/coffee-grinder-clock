// Copyright: 2020, Diez B. Roggisch, Berlin, all rights reserved
#include "colormap.hh"

namespace {

const std::array<uint32_t, 256> jet = {
    0x00007f, 0x000084, 0x000088, 0x00008d, 0x000091, 0x000096, 0x00009a,
    0x00009f, 0x0000a3, 0x0000a8, 0x0000ac, 0x0000b1, 0x0000b6, 0x0000ba,
    0x0000bf, 0x0000c3, 0x0000c8, 0x0000cc, 0x0000d1, 0x0000d5, 0x0000da,
    0x0000de, 0x0000e3, 0x0000e8, 0x0000ec, 0x0000f1, 0x0000f5, 0x0000fa,
    0x0000fe, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0004ff, 0x0008ff,
    0x000cff, 0x0010ff, 0x0014ff, 0x0018ff, 0x001cff, 0x0020ff, 0x0024ff,
    0x0028ff, 0x002cff, 0x0030ff, 0x0034ff, 0x0038ff, 0x003cff, 0x0040ff,
    0x0044ff, 0x0048ff, 0x004cff, 0x0050ff, 0x0054ff, 0x0058ff, 0x005cff,
    0x0060ff, 0x0064ff, 0x0068ff, 0x006cff, 0x0070ff, 0x0074ff, 0x0078ff,
    0x007cff, 0x0080ff, 0x0084ff, 0x0088ff, 0x008cff, 0x0090ff, 0x0094ff,
    0x0098ff, 0x009cff, 0x00a0ff, 0x00a4ff, 0x00a8ff, 0x00acff, 0x00b0ff,
    0x00b4ff, 0x00b8ff, 0x00bcff, 0x00c0ff, 0x00c4ff, 0x00c8ff, 0x00ccff,
    0x00d0ff, 0x00d4ff, 0x00d8ff, 0x00dcfe, 0x00e0fa, 0x00e4f7, 0x02e8f4,
    0x05ecf1, 0x08f0ed, 0x0cf4ea, 0x0ff8e7, 0x12fce4, 0x15ffe1, 0x18ffdd,
    0x1cffda, 0x1fffd7, 0x22ffd4, 0x25ffd0, 0x29ffcd, 0x2cffca, 0x2fffc7,
    0x32ffc3, 0x36ffc0, 0x39ffbd, 0x3cffba, 0x3fffb7, 0x42ffb3, 0x46ffb0,
    0x49ffad, 0x4cffaa, 0x4fffa6, 0x53ffa3, 0x56ffa0, 0x59ff9d, 0x5cff9a,
    0x5fff96, 0x63ff93, 0x66ff90, 0x69ff8d, 0x6cff89, 0x70ff86, 0x73ff83,
    0x76ff80, 0x79ff7d, 0x7cff79, 0x80ff76, 0x83ff73, 0x86ff70, 0x89ff6c,
    0x8dff69, 0x90ff66, 0x93ff63, 0x96ff5f, 0x9aff5c, 0x9dff59, 0xa0ff56,
    0xa3ff53, 0xa6ff4f, 0xaaff4c, 0xadff49, 0xb0ff46, 0xb3ff42, 0xb7ff3f,
    0xbaff3c, 0xbdff39, 0xc0ff36, 0xc3ff32, 0xc7ff2f, 0xcaff2c, 0xcdff29,
    0xd0ff25, 0xd4ff22, 0xd7ff1f, 0xdaff1c, 0xddff18, 0xe0ff15, 0xe4ff12,
    0xe7ff0f, 0xeaff0c, 0xedff08, 0xf1fc05, 0xf4f802, 0xf7f400, 0xfaf000,
    0xfeed00, 0xffe900, 0xffe500, 0xffe200, 0xffde00, 0xffda00, 0xffd700,
    0xffd300, 0xffcf00, 0xffcb00, 0xffc800, 0xffc400, 0xffc000, 0xffbd00,
    0xffb900, 0xffb500, 0xffb100, 0xffae00, 0xffaa00, 0xffa600, 0xffa300,
    0xff9f00, 0xff9b00, 0xff9800, 0xff9400, 0xff9000, 0xff8c00, 0xff8900,
    0xff8500, 0xff8100, 0xff7e00, 0xff7a00, 0xff7600, 0xff7300, 0xff6f00,
    0xff6b00, 0xff6700, 0xff6400, 0xff6000, 0xff5c00, 0xff5900, 0xff5500,
    0xff5100, 0xff4d00, 0xff4a00, 0xff4600, 0xff4200, 0xff3f00, 0xff3b00,
    0xff3700, 0xff3400, 0xff3000, 0xff2c00, 0xff2800, 0xff2500, 0xff2100,
    0xff1d00, 0xff1a00, 0xff1600, 0xfe1200, 0xfa0f00, 0xf50b00, 0xf10700,
    0xec0300, 0xe80000, 0xe30000, 0xde0000, 0xda0000, 0xd50000, 0xd10000,
    0xcc0000, 0xc80000, 0xc30000, 0xbf0000, 0xba0000, 0xb60000, 0xb10000,
    0xac0000, 0xa80000, 0xa30000, 0x9f0000, 0x9a0000, 0x960000, 0x910000,
    0x8d0000, 0x880000, 0x840000, 0x7f0000};

const std::array<uint32_t, 256> gnuplot = {
    0x000000, 0x0f0006, 0x16000c, 0x1b0012, 0x1f0019, 0x23001f, 0x270025,
    0x2a002b, 0x2d0031, 0x2f0038, 0x32003e, 0x340044, 0x37004a, 0x390050,
    0x3b0056, 0x3d005c, 0x3f0061, 0x410067, 0x43006d, 0x450073, 0x470078,
    0x49007e, 0x4a0083, 0x4c0088, 0x4e008e, 0x4f0093, 0x510098, 0x52009d,
    0x5400a2, 0x5500a7, 0x5700ab, 0x5800b0, 0x5a00b4, 0x5b00b9, 0x5d00bd,
    0x5e00c1, 0x5f00c5, 0x6100c9, 0x6200cd, 0x6300d1, 0x6400d4, 0x6601d7,
    0x6701db, 0x6801de, 0x6901e1, 0x6b01e4, 0x6c01e6, 0x6d01e9, 0x6e01ec,
    0x6f01ee, 0x7001f0, 0x7202f2, 0x7302f4, 0x7402f6, 0x7502f7, 0x7602f9,
    0x7702fa, 0x7802fb, 0x7903fc, 0x7a03fd, 0x7b03fd, 0x7c03fe, 0x7d03fe,
    0x7e03fe, 0x7f04fe, 0x8004fe, 0x8104fe, 0x8204fe, 0x8304fd, 0x8405fc,
    0x8505fb, 0x8605fa, 0x8705f9, 0x8805f8, 0x8906f6, 0x8a06f5, 0x8b06f3,
    0x8c07f1, 0x8d07ef, 0x8d07ed, 0x8e07ea, 0x8f08e8, 0x9008e5, 0x9108e2,
    0x9209df, 0x9309dc, 0x9409d9, 0x940ad6, 0x950ad2, 0x960acf, 0x970bcb,
    0x980bc7, 0x990bc3, 0x990cbf, 0x9a0cbb, 0x9b0db7, 0x9c0db2, 0x9d0eae,
    0x9e0ea9, 0x9e0ea4, 0x9f0f9f, 0xa00f9a, 0xa11095, 0xa21090, 0xa2118b,
    0xa31186, 0xa41280, 0xa5127b, 0xa51375, 0xa61370, 0xa7146a, 0xa81564,
    0xa8155f, 0xa91659, 0xaa1653, 0xab174d, 0xab1847, 0xac1841, 0xad193b,
    0xae1935, 0xae1a2e, 0xaf1b28, 0xb01b22, 0xb11c1c, 0xb11d15, 0xb21e0f,
    0xb31e09, 0xb31f03, 0xb42000, 0xb52100, 0xb62100, 0xb62200, 0xb72300,
    0xb82400, 0xb82500, 0xb92500, 0xba2600, 0xba2700, 0xbb2800, 0xbc2900,
    0xbc2a00, 0xbd2b00, 0xbe2c00, 0xbe2c00, 0xbf2d00, 0xc02e00, 0xc02f00,
    0xc13000, 0xc23100, 0xc23200, 0xc33300, 0xc43400, 0xc43600, 0xc53700,
    0xc63800, 0xc63900, 0xc73a00, 0xc83b00, 0xc83c00, 0xc93d00, 0xc93e00,
    0xca4000, 0xcb4100, 0xcb4200, 0xcc4300, 0xcd4500, 0xcd4600, 0xce4700,
    0xce4800, 0xcf4a00, 0xd04b00, 0xd04c00, 0xd14e00, 0xd24f00, 0xd25100,
    0xd35200, 0xd35300, 0xd45500, 0xd55600, 0xd55800, 0xd65900, 0xd65b00,
    0xd75c00, 0xd85e00, 0xd85f00, 0xd96100, 0xd96200, 0xda6400, 0xda6600,
    0xdb6700, 0xdc6900, 0xdc6b00, 0xdd6c00, 0xdd6e00, 0xde7000, 0xde7200,
    0xdf7300, 0xe07500, 0xe07700, 0xe17900, 0xe17b00, 0xe27c00, 0xe27e00,
    0xe38000, 0xe48200, 0xe48400, 0xe58600, 0xe58800, 0xe68a00, 0xe68c00,
    0xe78e00, 0xe79000, 0xe89200, 0xe99400, 0xe99600, 0xea9800, 0xea9a00,
    0xeb9d00, 0xeb9f00, 0xeca100, 0xeca300, 0xeda500, 0xeda800, 0xeeaa00,
    0xeeac00, 0xefaf00, 0xf0b100, 0xf0b300, 0xf1b600, 0xf1b800, 0xf2bb00,
    0xf2bd00, 0xf3c000, 0xf3c200, 0xf4c500, 0xf4c700, 0xf5ca00, 0xf5cc00,
    0xf6cf00, 0xf6d100, 0xf7d400, 0xf7d700, 0xf8d900, 0xf8dc00, 0xf9df00,
    0xf9e200, 0xfae400, 0xfae700, 0xfbea00, 0xfbed00, 0xfcf000, 0xfcf300,
    0xfdf600, 0xfdf900, 0xfefc00, 0xffff00};

const std::array<uint32_t, 256> brg = {
    0x0000ff, 0x0200fd, 0x0400fb, 0x0600f9, 0x0800f7, 0x0a00f5, 0x0c00f3, 0x0e00f1,
    0x1000ef, 0x1200ed, 0x1400eb, 0x1600e9, 0x1800e7, 0x1a00e5, 0x1c00e3, 0x1e00e1,
    0x2000df, 0x2200dd, 0x2400db, 0x2600d9, 0x2800d7, 0x2a00d5, 0x2c00d3, 0x2e00d1,
    0x3000cf, 0x3200cd, 0x3400cb, 0x3600c9, 0x3800c7, 0x3a00c5, 0x3c00c3, 0x3e00c1,
    0x4000bf, 0x4100bd, 0x4400bb, 0x4600b9, 0x4800b7, 0x4900b5, 0x4c00b3, 0x4e00b1,
    0x5000af, 0x5100ad, 0x5400ab, 0x5600a9, 0x5800a7, 0x5900a5, 0x5c00a3, 0x5e00a1,
    0x60009f, 0x61009d, 0x64009b, 0x660099, 0x680097, 0x690095, 0x6c0093, 0x6e0091,
    0x70008f, 0x71008d, 0x74008b, 0x760089, 0x780087, 0x790085, 0x7c0083, 0x7e0081,
    0x80007f, 0x82007d, 0x83007b, 0x860079, 0x880077, 0x8a0075, 0x8c0072, 0x8e0071,
    0x90006f, 0x92006d, 0x93006b, 0x960069, 0x980067, 0x9a0065, 0x9c0062, 0x9e0061,
    0xa0005f, 0xa2005d, 0xa3005b, 0xa60059, 0xa80057, 0xaa0055, 0xac0052, 0xae0051,
    0xb0004f, 0xb2004d, 0xb3004b, 0xb60049, 0xb80047, 0xba0045, 0xbc0042, 0xbe0041,
    0xc0003f, 0xc2003d, 0xc3003b, 0xc60038, 0xc80037, 0xca0035, 0xcc0032, 0xce0030,
    0xd0002f, 0xd2002d, 0xd3002b, 0xd60028, 0xd80027, 0xda0025, 0xdc0022, 0xde0020,
    0xe0001f, 0xe2001d, 0xe3001b, 0xe60018, 0xe80017, 0xea0015, 0xec0012, 0xee0010,
    0xf0000f, 0xf2000d, 0xf3000b, 0xf60008, 0xf80007, 0xfa0005, 0xfc0002, 0xfe0000,
    0xfe0100, 0xfc0300, 0xfa0500, 0xf80700, 0xf60800, 0xf40b00, 0xf20d00, 0xf00f00,
    0xee1100, 0xec1300, 0xea1500, 0xe81700, 0xe61900, 0xe41b00, 0xe21d00, 0xe01f00,
    0xde2100, 0xdc2300, 0xda2500, 0xd82700, 0xd62800, 0xd32b00, 0xd22d00, 0xd02f00,
    0xce3100, 0xcc3300, 0xca3500, 0xc83700, 0xc63900, 0xc33b00, 0xc23d00, 0xc03f00,
    0xbe4100, 0xbc4300, 0xba4500, 0xb84700, 0xb64800, 0xb34b00, 0xb24d00, 0xb04f00,
    0xae5100, 0xac5300, 0xaa5500, 0xa85700, 0xa65900, 0xa35b00, 0xa25d00, 0xa05f00,
    0x9e6100, 0x9c6300, 0x9a6500, 0x986700, 0x966800, 0x936b00, 0x926d00, 0x906f00,
    0x8e7100, 0x8c7300, 0x8a7500, 0x887700, 0x867900, 0x837b00, 0x827d00, 0x807f00,
    0x7e8100, 0x7c8300, 0x798500, 0x788700, 0x768800, 0x748b00, 0x718d00, 0x708f00,
    0x6e9100, 0x6c9300, 0x699500, 0x689700, 0x669900, 0x649b00, 0x619d00, 0x609f00,
    0x5ea100, 0x5ca300, 0x59a500, 0x58a700, 0x56a800, 0x54ab00, 0x51ad00, 0x50af00,
    0x4eb100, 0x4cb300, 0x49b500, 0x48b700, 0x46b900, 0x44bb00, 0x41bd00, 0x40bf00,
    0x3ec100, 0x3cc300, 0x39c500, 0x38c700, 0x36c800, 0x34cb00, 0x31cd00, 0x30cf00,
    0x2ed100, 0x2cd300, 0x29d500, 0x28d700, 0x26d900, 0x24db00, 0x21dd00, 0x20df00,
    0x1ee100, 0x1ce300, 0x19e500, 0x18e700, 0x16e800, 0x14eb00, 0x11ed00, 0x10ef00,
    0x0ef100, 0x0cf300, 0x09f500, 0x08f700, 0x06f900, 0x04fb00, 0x01fd00, 0x00ff00};
} // end namespace

void fill_palette(std::array<uint16_t, 256> &palette) {
  auto &p = jet;
  for (size_t i = 0; i < 256; ++i) {
    uint16_t color = 0;
    auto r = p[i] >> 16 & 0xff;
    auto g = p[i] >> 8 & 0xff;
    auto b = p[i] & 0xff;
    color = ((r >> 3) << 11) | ((g >> 2) << 5) | (b >> 3);
    palette[i] = color;
  }
}
